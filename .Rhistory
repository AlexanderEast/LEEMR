factors <- x$Factors
rm(x)
colnames(data)
# A. Set seed.
set.seed(12345)
# B. Column check. needs columns (Units, weight, Media,)
colnames(data)<- tolower(colnames(data))
wtcol<-tolower(wtcol)
#1. Units to ng/m3,ng/L, or ng/g.
data<- data %>% dplyr::mutate(UNITFACTOR = case_when(
(units %in% c("ng/m3","ng/L","ng/g","µg/kg","ug/kg","pg/mL","pg/ml")) ~ 1,
(units %in% c("pg/m3","pg/g")) ~ 0.001,
(units %in% c("ng/mL","ug/l","µg/L","ug/m³","µg/m³","ug/m3")) ~ 1000)) %>%
mutate_at(c("min","max","median","mean","sd","gm","gsd","p10","p25","p75","p90","p95","p99"),~.*UNITFACTOR) %>%
mutate(Units = case_when(
(units %in% c("ug/m3","µg/m3","pg/m3","ng/m3")) ~ "ng/m3",
(units %in% c("ng/mL","ug/l","ug/L","µg/l","µg/L","pg/ml","pg/mL","ng/L")) ~ "ng/L",
(units %in% c("pg/g","µg/kg","ug/kg","ng/g")) ~ "ng/g")) %>%
select(-UNITFACTOR)
#2. gm/gsd Estimator
# A. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# B. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# C. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# D. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# E. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# F. Estimate mean and sd using "Estimating.datalsdata" Methods (5) and (16). mean calculated from min, median, maximum,
# and sd from minimum, median, maximum, and range.
data <- data %>% mutate(mean = if_else(!is.na(mean),mean, (min+2*median+max)/4))
data <- data %>% mutate(sd = if_else(!is.na(sd),sd, sqrt ((1/12) * ((min-2*median+max)^2)/4 + (max-min)^2)))
# G. Estimate sd using Ramirez & Codata Method and range rule. Applied only if weight  > 10.
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/ (3*sqrt(log(`weight`))-1.5)))
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/4))
# ______________________________ Repeat A - E. ______________________________ #
# H. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# I. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# J. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# K. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# L. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# M. Remove Infs.
data$gm[is.infinite(data$gm)]<- NA
data$gsd[is.infinite(data$gsd)]<- NA
# Remove co
# Split by media and chemical
md <- split(data,list(data$media,data$chemical),drop = TRUE)
x <- md$Dust.PFOA
x$`sample size`
x <- x[!is.na(x[wtcol]),]
x$`sample size`
x$gm[complete.cases(x$gm,x$gsd)]
x[,complete.cases(wtcol)][complete.cases(x$gm,x$gsd)]
wgm  <- weighted.mean(x$gm[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
wgsd <- weighted.mean(x$gsd[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
wgm,wgsd
x[wtcol]
x[wtcol] <- as.numeric(x[wtcol])
x[wtcol]
as.numeric(x[wtcol])
wgmwgsd <- function(x){
# filter out NAs
x <- x[!is.na(x[wtcol]),]
# wgm wgsd
wgm  <- weighted.mean(x$gm[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
wgsd <- weighted.mean(x$gsd[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
y <- data.frame(wgm,wgsd)
return(y)
}
routes<-lapply(md,wgmwgsd)
View(routes)
library('rio')
library('dplyr')
LEM <- function(data,factors,wtcol,n){
return(x)
}
rm(list=ls())
wtcol <- "Sample Size"
x <- import_list("LEP Dev.xlsx")
data <- x$Data
factors <- x$Factors
rm(x)
colnames(data)
# A. Set seed.
set.seed(12345)
# B. Column check. needs columns (Units, weight, Media,)
colnames(data)<- tolower(colnames(data))
wtcol<-tolower(wtcol)
#1. Units to ng/m3,ng/L, or ng/g.
data<- data %>% dplyr::mutate(UNITFACTOR = case_when(
(units %in% c("ng/m3","ng/L","ng/g","µg/kg","ug/kg","pg/mL","pg/ml")) ~ 1,
(units %in% c("pg/m3","pg/g")) ~ 0.001,
(units %in% c("ng/mL","ug/l","µg/L","ug/m³","µg/m³","ug/m3")) ~ 1000)) %>%
mutate_at(c("min","max","median","mean","sd","gm","gsd","p10","p25","p75","p90","p95","p99"),~.*UNITFACTOR) %>%
mutate(Units = case_when(
(units %in% c("ug/m3","µg/m3","pg/m3","ng/m3")) ~ "ng/m3",
(units %in% c("ng/mL","ug/l","ug/L","µg/l","µg/L","pg/ml","pg/mL","ng/L")) ~ "ng/L",
(units %in% c("pg/g","µg/kg","ug/kg","ng/g")) ~ "ng/g")) %>%
select(-UNITFACTOR)
#2. gm/gsd Estimator
# A. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# B. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# C. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# D. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# E. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# F. Estimate mean and sd using "Estimating.datalsdata" Methods (5) and (16). mean calculated from min, median, maximum,
# and sd from minimum, median, maximum, and range.
data <- data %>% mutate(mean = if_else(!is.na(mean),mean, (min+2*median+max)/4))
data <- data %>% mutate(sd = if_else(!is.na(sd),sd, sqrt ((1/12) * ((min-2*median+max)^2)/4 + (max-min)^2)))
# G. Estimate sd using Ramirez & Codata Method and range rule. Applied only if weight  > 10.
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/ (3*sqrt(log(`weight`))-1.5)))
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/4))
# ______________________________ Repeat A - E. ______________________________ #
# H. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# I. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# J. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# K. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# L. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# M. Remove Infs.
data$gm[is.infinite(data$gm)]<- NA
data$gsd[is.infinite(data$gsd)]<- NA
# Remove co
# Split by media and chemical
md <- split(data,list(data$media,data$chemical),drop = TRUE)
wgmwgsd <- function(x){
# filter out NAs
x <- x[!is.na(x[wtcol]),]
# wgm wgsd
wgm  <- weighted.mean(x$gm[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
wgsd <- weighted.mean(x$gsd[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
y <- data.frame(wgm,wgsd)
return(y)
}
md<-lapply(md,wgmwgsd)
distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$gsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
}
conc <- lapply(md,distributions)
distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$gsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
}
conc <- lapply(md,distributions)
x<-md$Dust.PFOA
#distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$gsd)))
x$wgm
log(x$gsd)
distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$wgsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
}
conc <- lapply(md,distributions)
x<-md$Dust.PFOA
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$wgsd)))
n
n <- 2000
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$wgsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$wgsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
}
x<-md$Dust.PFOA
distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$wgsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
}
conc <- lapply(md,distributions)
library('rio')
library('dplyr')
LEM <- function(data,factors,wtcol,n){
return(x)
}
rm(list=ls())
wtcol <- "Sample Size"
x <- import_list("LEP Dev.xlsx")
data <- x$Data
factors <- x$Factors
n <- 2000
rm(x)
colnames(data)
# A. Set seed.
set.seed(12345)
# B. Column check. needs columns (Units, weight, Media,)
colnames(data)<- tolower(colnames(data))
wtcol<-tolower(wtcol)
#1. Units to ng/m3,ng/L, or ng/g.
data<- data %>% dplyr::mutate(UNITFACTOR = case_when(
(units %in% c("ng/m3","ng/L","ng/g","µg/kg","ug/kg","pg/mL","pg/ml")) ~ 1,
(units %in% c("pg/m3","pg/g")) ~ 0.001,
(units %in% c("ng/mL","ug/l","µg/L","ug/m³","µg/m³","ug/m3")) ~ 1000)) %>%
mutate_at(c("min","max","median","mean","sd","gm","gsd","p10","p25","p75","p90","p95","p99"),~.*UNITFACTOR) %>%
mutate(Units = case_when(
(units %in% c("ug/m3","µg/m3","pg/m3","ng/m3")) ~ "ng/m3",
(units %in% c("ng/mL","ug/l","ug/L","µg/l","µg/L","pg/ml","pg/mL","ng/L")) ~ "ng/L",
(units %in% c("pg/g","µg/kg","ug/kg","ng/g")) ~ "ng/g")) %>%
select(-UNITFACTOR)
#2. gm/gsd Estimator
# A. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# B. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# C. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# D. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# E. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# F. Estimate mean and sd using "Estimating.datalsdata" Methods (5) and (16). mean calculated from min, median, maximum,
# and sd from minimum, median, maximum, and range.
data <- data %>% mutate(mean = if_else(!is.na(mean),mean, (min+2*median+max)/4))
data <- data %>% mutate(sd = if_else(!is.na(sd),sd, sqrt ((1/12) * ((min-2*median+max)^2)/4 + (max-min)^2)))
# G. Estimate sd using Ramirez & Codata Method and range rule. Applied only if weight  > 10.
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/ (3*sqrt(log(`weight`))-1.5)))
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/4))
# ______________________________ Repeat A - E. ______________________________ #
# H. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# I. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# J. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# K. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# L. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# M. Remove Infs.
data$gm[is.infinite(data$gm)]<- NA
data$gsd[is.infinite(data$gsd)]<- NA
# Remove co
# Split by media and chemical
md <- split(data,list(data$media,data$chemical),drop = TRUE)
wgmwgsd <- function(x){
# filter out NAs
x <- x[!is.na(x[wtcol]),]
# wgm wgsd
wgm  <- weighted.mean(x$gm[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
wgsd <- weighted.mean(x$gsd[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
y <- data.frame(wgm,wgsd)
return(y)
}
md<-lapply(md,wgmwgsd)
x<-md$Dust.PFOA
distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$wgsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
}
conc <- lapply(md,distributions)
conc$Dust.PFOA
factors
factors <-split(factors,list(factors$Individual,factors$Media,factors$Path),drop = TRUE)
factors$Adult.Dust.Dermal
x <- factors$Adult.Dust.Dermal
x$Factor
prod(x$Factor)
y <- prod(x$Factor)
unique(x$Individual)
unique(x$Path)
str_c(unique(x$Individual),
unique(x$Media),
unique(x$Path))
str_c(unique(x$Individual),
unique(x$Media),
unique(x$Path))
library('stringr')
str_c(unique(x$Individual),
unique(x$Media),
unique(x$Path))
str_c(unique(x$Individual)," "
unique(x$Media),
unique(x$Path))
str_c(unique(x$Individual)," ",
unique(x$Media),
unique(x$Path))
str_c(unique(x$Individual)," ",
unique(x$Media)," ",
unique(x$Path))
y <- data.frame(prod(x$Factor))
colnames(y)
myname <- str_c(unique(x$Individual)," ",
unique(x$Media)," ",
unique(x$Path))
colnames(y)<- myname
exposurefactors<- function(x){
myname <- str_c(unique(x$Individual)," ",
unique(x$Media)," ",
unique(x$Path))
y <- data.frame(prod(x$Factor))
colnames(y)<- myname
return(y)
}
factors<-exposurefactors(factors)
library('rio')
library('dplyr')
library('stringr')
LEM <- function(data,factors,wtcol,n){
return(x)
}
rm(list=ls())
wtcol <- "Sample Size"
x <- import_list("LEP Dev.xlsx")
data <- x$Data
factors <- x$Factors
n <- 2000
rm(x)
colnames(data)
# A. Set seed.
set.seed(12345)
# B. Column check. needs columns (Units, weight, Media,)
colnames(data)<- tolower(colnames(data))
wtcol<-tolower(wtcol)
#1. Units to ng/m3,ng/L, or ng/g.
data<- data %>% dplyr::mutate(UNITFACTOR = case_when(
(units %in% c("ng/m3","ng/L","ng/g","µg/kg","ug/kg","pg/mL","pg/ml")) ~ 1,
(units %in% c("pg/m3","pg/g")) ~ 0.001,
(units %in% c("ng/mL","ug/l","µg/L","ug/m³","µg/m³","ug/m3")) ~ 1000)) %>%
mutate_at(c("min","max","median","mean","sd","gm","gsd","p10","p25","p75","p90","p95","p99"),~.*UNITFACTOR) %>%
mutate(Units = case_when(
(units %in% c("ug/m3","µg/m3","pg/m3","ng/m3")) ~ "ng/m3",
(units %in% c("ng/mL","ug/l","ug/L","µg/l","µg/L","pg/ml","pg/mL","ng/L")) ~ "ng/L",
(units %in% c("pg/g","µg/kg","ug/kg","ng/g")) ~ "ng/g")) %>%
select(-UNITFACTOR)
#2. gm/gsd Estimator
# A. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# B. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# C. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# D. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# E. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# F. Estimate mean and sd using "Estimating.datalsdata" Methods (5) and (16). mean calculated from min, median, maximum,
# and sd from minimum, median, maximum, and range.
data <- data %>% mutate(mean = if_else(!is.na(mean),mean, (min+2*median+max)/4))
data <- data %>% mutate(sd = if_else(!is.na(sd),sd, sqrt ((1/12) * ((min-2*median+max)^2)/4 + (max-min)^2)))
# G. Estimate sd using Ramirez & Codata Method and range rule. Applied only if weight  > 10.
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/ (3*sqrt(log(`weight`))-1.5)))
data <- data %>% mutate(sd = if_else((!is.na(sd) & `weight` > 10),sd, (max-min)/4))
# ______________________________ Repeat A - E. ______________________________ #
# H. Estimate gm using Pleil 1.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , median))
# I. Estimate gm using Pleil 2.
data <- data %>% mutate(gm = if_else(!is.na(gm),gm , mean/(1+0.5 *(sd/mean)^2)))
# J. Estimate gsd using Pleil 1.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p10/gm)/qnorm(.10)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p25/gm)/qnorm(.25)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p75/gm)/qnorm(.75)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p90/gm)/qnorm(.90)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p95/gm)/qnorm(.95)))) %>%
mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(p99/gm)/qnorm(.99))))
# K. Estimate gsd using Pleil 2.
data <- suppressWarnings(data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(sqrt(2 * log(mean/gm))))))
# L. Estimate gm using Pleil 3.
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(max/gm)/qnorm(1-1/`sample size`))))
data <- data %>% mutate(gsd = if_else(!is.na(gsd),gsd ,exp(log(min/gm)/qnorm(1/`sample size`))))
# M. Remove Infs.
data$gm[is.infinite(data$gm)]<- NA
data$gsd[is.infinite(data$gsd)]<- NA
# Remove co
# Split by media and chemical
md <- split(data,list(data$media,data$chemical),drop = TRUE)
wgmwgsd <- function(x){
# filter out NAs
x <- x[!is.na(x[wtcol]),]
# wgm wgsd
wgm  <- weighted.mean(x$gm[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
wgsd <- weighted.mean(x$gsd[complete.cases(x$gsd,x$gm)],
x[,wtcol][complete.cases(x$gsd,x$gm)])
y <- data.frame(wgm,wgsd)
return(y)
}
md<-lapply(md,wgmwgsd)
# Create concentration curves
distributions <- function(x){
set.seed(seed = 12345)
Concentration<- rlnorm(n,log(x$wgm),abs(log(x$wgsd)))
Concentration <- data.frame(Concentration)
return(Concentration)
}
conc <- lapply(md,distributions)
# Load Exposure Factors
factors <-split(factors,list(factors$Individual,factors$Media,factors$Path),drop = TRUE)
exposurefactors<- function(x){
myname <- str_c(unique(x$Individual)," ",
unique(x$Media)," ",
unique(x$Path))
y <- data.frame(prod(x$Factor))
colnames(y)<- myname
return(y)
}
factors<-lapply(factors,exposurefactors)
View(factors)
factors$Adult.Dust.Dermal
names(factors)
names(conc)
factors$Adult.Dust.Dermal
factors$Adult.Dust.Dermal*conc$Dust.PFOA
as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOA
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOA)
summary(as.numeric(factors$Adult.Dust.Ingestion*conc$Dust.PFOA))
summary(as.numeric(factors$Adult.Dust.Ingestion)*conc$Dust.PFOA)
summary(as.numeric(factors$Adult.Water.Ingestion)*conc$Water.PFOA)
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOS)
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOA)
summary(as.numeric(factors$Adult.Dust.Ingestion)*conc$Dust.PFOA)
summary(as.numeric(factors$Adult.Water.Ingestion)*conc$Water.PFOA)
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOA)
summary(as.numeric(factors$Adult.Dust.Ingestion)*conc$Dust.PFOA)
summary(as.numeric(factors$Adult.Water.Ingestion)*conc$Water.PFOA)
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOS)
summary(as.numeric(factors$Adult.Dust.Ingestion)*conc$Dust.PFOS)
summary(as.numeric(factors$Adult.Water.Ingestion)*conc$Water.PFOS)
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOS)
summary(as.numeric(factors$Adult.Dust.Ingestion)*conc$Dust.PFOS)
summary(as.numeric(factors$Adult.Water.Ingestion)*conc$Water.PFOS)
summary(as.numeric(factors$Child.Dust.Dermal)*conc$Dust.PFOA)
summary(as.numeric(factors$Child.Dust.Ingestion)*conc$Dust.PFOA)
summary(as.numeric(factors$Child.Water.Ingestion)*conc$Water.PFOA)
summary(as.numeric(factors$Child.Dust.Dermal)*conc$Dust.PFOA)
summary(as.numeric(factors$Child.Dust.Ingestion)*conc$Dust.PFOA)
summary(as.numeric(factors$Child.Water.Ingestion)*conc$Water.PFOA)
summary(as.numeric(factors$Child.Dust.Dermal)*conc$Dust.PFOS)
summary(as.numeric(factors$Child.Dust.Ingestion)*conc$Dust.PFOS)
summary(as.numeric(factors$Child.Water.Ingestion)*conc$Water.PFOS)
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOA)
summary(as.numeric(factors$Adult.Dust.Dermal)*conc$Dust.PFOS)
